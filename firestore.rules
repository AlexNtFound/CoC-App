rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function signedIn() { return request.auth != null; }
    function isAdmin(uid) {
      return get(/databases/$(db)/documents/users/$(uid)).data.role == 'admin';
    }
    function isOrganizer() {
      return signedIn() && request.auth.uid == resource.data.organizerId;
    }
    function validateEventData(data) {
      return data.keys().hasAll(
        ['title','description','date','time','location','organizer','organizerId','category','attendees','waitingList','isPublished']
      ) &&
      data.title is string && data.title.size() > 0 &&
      data.description is string &&
      data.date is string && data.time is string &&
      data.location is string && data.location.size() > 0 &&
      data.organizer is string && data.organizer.size() > 0 &&
      data.organizerId is string &&
      data.category in ['worship','study','fellowship','blending','prayer'] &&
      data.attendees is list && data.waitingList is list &&
      data.isPublished is bool;
    }
    // 仅允许当前用户对自己做 RSVP 变更（不允许改计数）
    function onlySelfRSVP(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['attendees','waitingList','updatedAt']) &&
      (
        // 加入
        (!(request.auth.uid in oldData.attendees) &&
          (request.auth.uid in newData.attendees) &&
          newData.attendees.size() == oldData.attendees.size() + 1 &&
          newData.waitingList == oldData.waitingList)
        ||
        // 退出
        ((request.auth.uid in oldData.attendees) &&
          !(request.auth.uid in newData.attendees) &&
          newData.attendees.size() == oldData.attendees.size() - 1 &&
          newData.waitingList == oldData.waitingList)
        ||
        // 等候列表 -> 正式（或相反），两边都只变动自己
        (
          ((request.auth.uid in oldData.waitingList) != (request.auth.uid in newData.waitingList)) &&
          ((request.auth.uid in oldData.attendees) != (request.auth.uid in newData.attendees)) &&
          (newData.attendees.size() - oldData.attendees.size()) == ((request.auth.uid in newData.attendees) ? 1 : -1) &&
          (newData.waitingList.size() - oldData.waitingList.size()) == ((request.auth.uid in newData.waitingList) ? 1 : -1)
        )
      );
    }

    match /events/{eventId} {
      // 已发布任何人可读；草稿仅组织者/管理员可读
      allow read: if resource.data.isPublished == true
                  || (signedIn() && (isOrganizer() || isAdmin(request.auth.uid)));

      // 创建：必须本人为组织者，且数据有效
      allow create: if signedIn()
                    && request.auth.uid == request.resource.data.organizerId
                    && validateEventData(request.resource.data);

      // 组织者/管理员更新：数据有效且 organizerId 不变
      allow update: if signedIn()
                    && (isOrganizer() || isAdmin(request.auth.uid))
                    && validateEventData(request.resource.data)
                    && request.resource.data.organizerId == resource.data.organizerId;

      // 普通用户仅能做“自己”的 RSVP 变更
      allow update: if signedIn() && onlySelfRSVP(request.resource.data, resource.data);

      // 删除：组织者或管理员
      allow delete: if signedIn() && (isOrganizer() || isAdmin(request.auth.uid));
    }

    match /users/{userId} {
      allow read, write: if signedIn() && request.auth.uid == userId;
    }

    match /announcements/{id} {
      allow read: if true;
      allow create, update, delete: if signedIn() && isAdmin(request.auth.uid);
    }
  }
}